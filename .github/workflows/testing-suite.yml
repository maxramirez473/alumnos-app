name: 🧪 Suite Completa de Testing

# Ejecuta en cada push y pull request
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecuta tests diariamente a las 2 AM UTC
    - cron: '0 2 * * *'

# Permite ejecutar manualmente
workflow_dispatch:

jobs:
  # ==========================================
  # JOB 1: TESTING UNITARIO (Caja Blanca)
  # ==========================================
  unit-tests:
    name: 🔬 Testing Unitario (Caja Blanca)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-

      - name: 🔧 Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: 📁 Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:clear
          php artisan cache:clear

      - name: 🗄️ Create SQLite Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: 🧪 Execute Unit Tests (Caja Blanca)
        run: |
          echo "🔬 Ejecutando Testing Unitario - Caja Blanca"
          echo "Conocemos la implementación interna de los modelos"
          vendor/bin/phpunit tests/Unit --coverage-text --colors=never
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

  # ==========================================
  # JOB 2: TESTING DE INTEGRACIÓN
  # ==========================================
  integration-tests:
    name: 🔗 Testing de Integración
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testing
          MYSQL_DATABASE: alumnos_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv

      - name: 📦 Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 🔧 Prepare Application
        run: |
          cp .env.testing .env
          php artisan key:generate

      - name: 🗄️ Setup Database
        run: |
          php artisan migrate --force
          php artisan db:seed --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: alumnos_testing
          DB_USERNAME: root
          DB_PASSWORD: testing

      - name: 🔗 Execute Integration Tests
        run: |
          echo "🔗 Ejecutando Testing de Integración"
          echo "Probando interacción entre Controladores, Modelos y BD"
          vendor/bin/phpunit tests/Feature/AlumnoIntegrationTest.php --colors=never
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: alumnos_testing
          DB_USERNAME: root
          DB_PASSWORD: testing

  # ==========================================
  # JOB 3: TESTING DE API (Caja Negra)
  # ==========================================
  api-tests:
    name: 📡 Testing de API (Caja Negra)
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: 📦 Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 🔧 Prepare Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          touch database/database.sqlite
          php artisan migrate --force

      - name: 📡 Execute API Tests (Caja Negra)
        run: |
          echo "📡 Ejecutando Testing de API - Caja Negra"
          echo "Solo probamos entrada y salida, sin conocer implementación"
          vendor/bin/phpunit tests/Feature/API/AlumnoApiTest.php --colors=never
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

  # ==========================================
  # JOB 4: TESTING E2E (Comportamiento)
  # ==========================================
  e2e-tests:
    name: 🎭 Testing End-to-End (Comportamiento)
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests]
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: 📦 Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 🔧 Prepare Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          touch database/database.sqlite
          php artisan migrate --force

      - name: 🎭 Execute E2E Tests (Comportamiento)
        run: |
          echo "🎭 Ejecutando Testing End-to-End"
          echo "Simulando flujos completos de usuario"
          vendor/bin/phpunit tests/Feature/AlumnoBehaviorTest.php --colors=never
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

  # ==========================================
  # JOB 5: ANÁLISIS DE COBERTURA
  # ==========================================
  coverage-analysis:
    name: 📊 Análisis de Cobertura
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, e2e-tests]
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: 📦 Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 🔧 Prepare Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          touch database/database.sqlite
          php artisan migrate --force

      - name: 📊 Generate Coverage Report
        run: |
          echo "📊 Generando reporte de cobertura completo"
          vendor/bin/phpunit --coverage-html coverage --coverage-clover coverage.xml
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: alumnos-app-coverage

      - name: 📈 Coverage Summary
        run: |
          echo "📈 RESUMEN DE COBERTURA:"
          echo "========================"
          if [ -f coverage.xml ]; then
            echo "✅ Reporte de cobertura generado exitosamente"
            echo "📁 Archivos analizados para cobertura"
          else
            echo "❌ No se pudo generar el reporte de cobertura"
          fi

  # ==========================================
  # JOB 6: REPORTE FINAL Y NOTIFICACIONES
  # ==========================================
  test-summary:
    name: 📋 Resumen de Testing
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, e2e-tests, coverage-analysis]
    if: always()
    
    steps:
      - name: 📋 Generate Test Summary
        run: |
          echo "🧪 RESUMEN COMPLETO DE TESTING"
          echo "=============================="
          echo ""
          echo "✅ TIPOS DE TESTING EJECUTADOS:"
          echo "🔬 Testing Unitario (Caja Blanca) - Modelos y componentes aislados"
          echo "🔗 Testing de Integración - Interacción entre componentes"
          echo "📡 Testing de API (Caja Negra) - Endpoints REST sin conocer implementación"
          echo "🎭 Testing E2E - Flujos completos de comportamiento de usuario"
          echo "📊 Análisis de Cobertura - Métricas de código cubierto"
          echo ""
          echo "🎯 PROPÓSITO EDUCATIVO:"
          echo "Esta suite demuestra diferentes enfoques de testing:"
          echo "• Caja Blanca: Conocemos la implementación interna"
          echo "• Caja Negra: Solo evaluamos entrada y salida"
          echo "• Integración: Componentes trabajando juntos"
          echo "• E2E: Experiencia completa del usuario"
          echo ""
          echo "📈 BENEFICIOS:"
          echo "• Detección temprana de errores"
          echo "• Confianza en el despliegue"
          echo "• Documentación viva del comportamiento"
          echo "• Facilitación del refactoring"
          echo ""
          
          # Determinar el estado general
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.api-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "🎉 RESULTADO: TODOS LOS TESTS PASARON ✅"
            echo "La aplicación está lista para producción!"
          else
            echo "❌ RESULTADO: ALGUNOS TESTS FALLARON"
            echo "Revisar los logs de los jobs fallidos."
          fi

      - name: 🔔 Notification Status
        run: |
          echo "🔔 Estado para notificaciones:"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "API Tests: ${{ needs.api-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Coverage: ${{ needs.coverage-analysis.result }}"
